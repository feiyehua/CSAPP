#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	iaddq $-9, %rdx
	jge Unrolled_loop		# if so, goto Done:
	jmp Three_check
# Perform 8 * 1 loop unrolling
	
Unrolled_loop:
	mrmovq (%rdi), %r10	# read val from src...
	rmmovq %r10, (%rsi)	# ...and store it to dst
Npos1:
	# instructions above performs the first iteration

	mrmovq 8(%rdi), %r11	# read val from src...
	andq %r10, %r10		# val <= 0?
	rmmovq %r11, 8(%rsi)	# ...and store it to dst
	jle Npos2		# if so, goto Npos2:
	iaddq $1, %rax		# count++
Npos2:

	mrmovq 16(%rdi), %r10	# read val from src...
	andq %r11, %r11		# val <= 0?
	rmmovq %r10, 16(%rsi)	# ...and store it to dst
	jle Npos3		# if so, goto Npos3:
	iaddq $1, %rax		# count++
Npos3:

	mrmovq 24(%rdi), %r11	# read val from src...
	andq %r10, %r10		# val <= 0?
	rmmovq %r11, 24(%rsi)	# ...and store it to dst
	jle Npos4		# if so, goto Npos4:
	iaddq $1, %rax		# count++
Npos4:

	mrmovq 32(%rdi), %r10	# read val from src...
	andq %r11, %r11		# val <= 0?
	rmmovq %r10, 32(%rsi)	# ...and store it to dst
	jle Npos5		# if so, goto Npos5:
	iaddq $1, %rax		# count++
Npos5:

	mrmovq 40(%rdi), %r11	# read val from src...
	andq %r10, %r10		# val <= 0?
	rmmovq %r11, 40(%rsi)	# ...and store it to dst
	jle Npos6		# if so, goto Npos6:
	iaddq $1, %rax		# count++
Npos6:

	mrmovq 48(%rdi), %r10	# read val from src...
	andq %r11, %r11		# val <= 0?
	rmmovq %r10, 48(%rsi)	# ...and store it to dst
	jle Npos7		# if so, goto Npos7:
	iaddq $1, %rax		# count++
Npos7:

	mrmovq 56(%rdi), %r11	# read val from src...
	andq %r10, %r10		# val <= 0?
	rmmovq %r11, 56(%rsi)	# ...and store it to dst
	jle Npos8		# if so, goto Npos8:
	iaddq $1, %rax		# count++
Npos8:

	mrmovq 64(%rdi), %r10	# read val from src...
	andq %r11, %r11		# val <= 0?
	rmmovq %r10, 64(%rsi)	# ...and store it to dst
	jle Npos9		# if so, goto Npos9:
	iaddq $1, %rax		# count++


Npos9:
	iaddq $72, %rdi
	iaddq $72, %rsi
	andq %r10, %r10		# val <= 0?
	jle Npos10
	iaddq $1, %rax		# count++
Npos10:
	iaddq $-9, %rdx
	
	jge Unrolled_loop	# if len > 0, goto Unrolled_loop:



Three_check:
	iaddq $7, %rdx
	jg Unrolled_loop_2
	je Loop2		# if so, goto Loop Once:
	iaddq $1, %rdx
	je Loop 
	ret


Unrolled_loop_2:
	mrmovq (%rdi), %r10	# read val from src...
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos1_2		# if so, goto Npos1_2:
	iaddq $1, %rax		# count++
Npos1_2:
	# instructions above performs the first iteration

	mrmovq 8(%rdi), %r10	# read val from src...
	rmmovq %r10, 8(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos2_2		# if so, goto Npos2_2:
	iaddq $1, %rax		# count++
Npos2_2:

	mrmovq 16(%rdi), %r10	# read val from src...
	rmmovq %r10, 16(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos3_2		# if so, goto Npos3_2:
	iaddq $1, %rax		# count++
Npos3_2:
	iaddq $24, %rsi		# dst++
	iaddq $24, %rdi		# src++

	iaddq $-3, %rdx
	jg Unrolled_loop_2	# if len > 0, goto Unrolled_loop_2:


Zero_check:
	# Perform the rest iterations
	je Loop2		# if so, goto Done:
	iaddq $1, %rdx
	je Loop 
	ret

Loop2:
	mrmovq (%rdi), %r10	# read val from src...
	iaddq $8, %rdi		# src++
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos:
	iaddq $8, %rsi		# dst++
Loop:
	mrmovq (%rdi), %r10	# read val from src...
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Done		# if so, goto Npos:
	iaddq $1, %rax		# count++





##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */ 
