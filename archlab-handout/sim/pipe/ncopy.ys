#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	iaddq $-12, %rdx
	jge Unrolled_loop		# if so, goto Done:
	iaddq $12, %rdx
	jg Loop
	ret
# Perform 8 * 1 loop unrolling
	
Unrolled_loop:
	mrmovq (%rdi), %r10	# read val from src...
	iaddq $8, %rdi		# src++
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos1		# if so, goto Npos1:
	iaddq $1, %rax		# count++
Npos1:
	iaddq $8, %rsi		# dst++
	# instructions above performs the first iteration

	mrmovq (%rdi), %r10	# read val from src...
	iaddq $8, %rdi		# src++
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos2		# if so, goto Npos2:
	iaddq $1, %rax		# count++
Npos2:
	iaddq $8, %rsi		# dst++

	mrmovq (%rdi), %r10	# read val from src...
	iaddq $8, %rdi		# src++
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos3		# if so, goto Npos3:
	iaddq $1, %rax		# count++
Npos3:
	iaddq $8, %rsi		# dst++

	mrmovq (%rdi), %r10	# read val from src...
	iaddq $8, %rdi		# src++
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos4		# if so, goto Npos4:
	iaddq $1, %rax		# count++
Npos4:
	iaddq $8, %rsi		# dst++

	mrmovq (%rdi), %r10	# read val from src...
	iaddq $8, %rdi		# src++
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos5		# if so, goto Npos5:
	iaddq $1, %rax		# count++
Npos5:
	iaddq $8, %rsi		# dst++

	mrmovq (%rdi), %r10	# read val from src...
	iaddq $8, %rdi		# src++
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos6		# if so, goto Npos6:
	iaddq $1, %rax		# count++
Npos6:
	iaddq $8, %rsi		# dst++

	mrmovq (%rdi), %r10	# read val from src...
	iaddq $8, %rdi		# src++
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos7		# if so, goto Npos7:
	iaddq $1, %rax		# count++
Npos7:
	iaddq $8, %rsi		# dst++

	mrmovq (%rdi), %r10	# read val from src...
	iaddq $8, %rdi		# src++
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos8		# if so, goto Npos8:
	iaddq $1, %rax		# count++
Npos8:
	iaddq $8, %rsi		# dst++

	mrmovq (%rdi), %r10	# read val from src...
	iaddq $8, %rdi		# src++
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos9		# if so, goto Npos9:
	iaddq $1, %rax		# count++
Npos9:
	iaddq $8, %rsi		# dst++

	mrmovq (%rdi), %r10	# read val from src...
	iaddq $8, %rdi		# src++
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos10		# if so, goto Npos10:
	iaddq $1, %rax		# count++
Npos10:
	iaddq $8, %rsi		# dst++

	mrmovq (%rdi), %r10	# read val from src...
	iaddq $8, %rdi		# src++
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos11		# if so, goto Npos11:
	iaddq $1, %rax		# count++
Npos11:
	iaddq $8, %rsi		# dst++

	mrmovq (%rdi), %r10	# read val from src...
	iaddq $8, %rdi		# src++
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos12		# if so, goto Npos12:
	iaddq $1, %rax		# count++
Npos12:
	iaddq $8, %rsi		# dst++


	iaddq $-12, %rdx
	jge Unrolled_loop	# if len > 0, goto Unrolled_loop:

	iaddq $12, %rdx


Zero_check:
	# Perform the rest iterations
	jg Loop			# if %rdx > 0, goto Loop to perform the rest iterations
	ret				# if %rdx = 0, return

Loop:
	mrmovq (%rdi), %r10	# read val from src...
	iaddq $8, %rdi		# src++
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos:
	iaddq $8, %rsi		# dst++
	iaddq $-1, %rdx
	jg Loop


##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */ 
